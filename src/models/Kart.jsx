/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 --shadows ./models/kart.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useKeyboardControls } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { lerp } from "three/src/math/MathUtils.js";
import VFXEmitter from "../wawa-vfx/VFXEmitter.tsx";
import { getDriftLevel } from "../constants.js";
import { Glow } from "../particles/drift/Glow.jsx";
import { useGameStore } from "../store.js";
import { Vector3 } from "three";

export function Kart({ speed, driftDirection, driftPower }) {
  const { nodes, materials } = useGLTF("/models/kart.glb");

  const wheel3 = useRef(null);
  const wheel2 = useRef(null);
  const wheel1 = useRef(null);
  const wheel0 = useRef(null);
  const groupRef = useRef(null);
  const frontWheels = useRef(null);

  const leftEmitterRef = useRef(null);
  const rightEmitterRef = useRef(null);

  const glow1Ref = useRef(null);
  const glow2Ref = useRef(null);

  const [, get] = useKeyboardControls();
  const yRotation = useRef(0);
  const wheelRef = useRef(null);

  const isDriftingRef = useRef(false);

  const flamePositionLeftRef = useRef(null); 
  const flamePositionRightRef = useRef(null);

  const setFlamePositions = useGameStore((state) => state.setFlamePositions);
  const setBoostPower = useGameStore((state) => state.setBoostPower);

  useFrame((_, delta) => {
    if (wheel0.current && wheel1.current && wheel2.current && wheel3.current) {
      const isDrifting = !!driftDirection.current;
      const { left, right } = get();
      const rotationSpeed = speed.current * 0.01;
      wheel0.current.rotation.x += rotationSpeed;
      wheel1.current.rotation.x += rotationSpeed;
      wheel2.current.rotation.x += rotationSpeed;
      wheel3.current.rotation.x += rotationSpeed;

      yRotation.current = lerp(
        yRotation.current,
        Number(right) - Number(left),
        2 * delta
      );
      frontWheels.current.rotation.y = -yRotation.current * 0.2;
      wheelRef.current.rotation.y = -yRotation.current;

      groupRef.current.rotation.y = lerp(
        groupRef.current.rotation.y,
        driftDirection.current * 0.4,
        4 * delta
      );

      const driftLevel = getDriftLevel(driftPower.current);
      if (isDrifting !== isDriftingRef.current) {
        isDriftingRef.current = isDrifting;
        if (isDrifting) {
          leftEmitterRef?.current?.startEmitting(true);
          rightEmitterRef?.current?.startEmitting(true);
          glow1Ref?.current?.setOpacity(1);
          glow2Ref?.current?.setOpacity(1);
        } else {
          leftEmitterRef?.current?.stopEmitting();
          rightEmitterRef?.current?.stopEmitting();
          glow1Ref?.current?.setOpacity(0);
          glow2Ref?.current?.setOpacity(0);
        }
      }

      if (isDrifting) {
        

        leftEmitterRef?.current?.updateColor(driftLevel.color);
        rightEmitterRef?.current?.updateColor(driftLevel.color);
        glow1Ref?.current?.setColor(driftLevel.color);
        glow2Ref?.current?.setColor(driftLevel.color);

        //  leftEmitterRef?.current?.updateNbParticles?.(driftLevel.nbParticles);
        //  rightEmitterRef?.current?.updateNbParticles?.(driftLevel.nbParticles);
      }
      setFlamePositions([flamePositionLeftRef.current.getWorldPosition(new Vector3()), flamePositionRightRef.current.getWorldPosition(new Vector3())]);
      
    }
  });

  useEffect(() => {
    if(leftEmitterRef.current && rightEmitterRef.current){
      leftEmitterRef?.current?.stopEmitting();
      rightEmitterRef?.current?.stopEmitting();
      glow1Ref?.current?.setOpacity(0);
      glow2Ref?.current?.setOpacity(0);
    }
  }, [])
  return (
    <group ref={groupRef} dispose={null}>
      <group position={[0.55, 0, 1.5]} rotation-x={-Math.PI / 9} ref={flamePositionLeftRef}>
      </group>
      <group position={[-0.5, 0, 1.5]} rotation-x={-Math.PI / 9} ref={flamePositionRightRef}>
      </group>
      <group position-y={-0.5} scale={1} rotation-y={Math.PI}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.body.geometry}
          material={materials.m_Body}
        >
          <mesh
            ref={wheelRef}
            castShadow
            receiveShadow
            geometry={nodes.d_wheel.geometry}
            material={materials.m_Body}
            position={[0, 0.378, 0.542]}
            rotation={[-1.134, 0, 0]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.booster.geometry}
            material={materials.m_Body}
            position={[0, 0.16, -0.55]}
            rotation={[0.279, 0, 0]}
          />
          <mesh
            ref={wheel3}
            castShadow
            receiveShadow
            geometry={nodes.wheel_3.geometry}
            material={materials.m_Tire}
            position={[0.74, -0.137, -0.7]}
          ></mesh>
          <group position={[0.9, -0.3, -0.9]}>
            <Glow ref={glow1Ref} />
            <VFXEmitter
              ref={leftEmitterRef}
              emitter="drifting"
              settings={{
                duration: 0.02,
                delay: 0.1,
                nbParticles: 1,
                spawnMode: "time",
                loop: true,
                startPositionMin: [0, 0, 0],
                startPositionMax: [0, 0, 0],
                startRotationMin: [0, 0, 0],
                startRotationMax: [0, 0, 0],
                particlesLifetime: [0.2, 0.4],
                speed: [6, 10],
                directionMin: [-0.3, 0.2, 0],
                directionMax: [-0.8, 0.7, 1],
                rotationSpeedMin: [0, 0, -1],
                rotationSpeedMax: [0, 0, 1],
                size: [0.1, 0.5],
              }}
            />
          </group>
          <group position={[-0.9, -0.3, -0.9]}>
            <Glow ref={glow2Ref} />

            <VFXEmitter
              ref={rightEmitterRef}
              emitter="drifting"
              settings={{
                duration: 0.02,
                delay: 0.1,
                nbParticles: 1,
                spawnMode: "time",
                loop: true,
                startPositionMin: [0, 0, 0],
                startPositionMax: [0, 0, 0],
                startRotationMin: [0, 0, 0],
                startRotationMax: [0, 0, 0],
                particlesLifetime: [0.2, 0.4],
                speed: [6, 10],
                directionMin: [0.3, 0.2, 0],
                directionMax: [0.8, 0.7, 1],
                rotationSpeedMin: [0, 0, -1],
                rotationSpeedMax: [0, 0, 1],
                size: [0.1, 0.5],
              }}
            />
          </group>
          <mesh
            ref={wheel2}
            castShadow
            receiveShadow
            geometry={nodes.wheel_2.geometry}
            material={materials.m_Tire}
            position={[-0.77, -0.137, -0.7]}
          />
          <group ref={frontWheels}>
            <mesh
              ref={wheel1}
              castShadow
              receiveShadow
              geometry={nodes.wheel_1.geometry}
              material={materials.m_Tire}
              position={[0.7, -0.2, 0.7]}
            />
            <mesh
              ref={wheel0}
              castShadow
              receiveShadow
              geometry={nodes.wheel_0.geometry}
              material={materials.m_Tire}
              position={[-0.7, -0.2, 0.7]}
            />
          </group>
        </mesh>
        {/* <mesh castShadow receiveShadow geometry={nodes.shape.geometry} material={materials['default']} /> */}
      </group>
    </group>
  );
}

useGLTF.preload("/models/kart.glb");
